-----10-2-2024 03:15 (StoneySpring688):
No hubo demasidos problemas en la implementación, ya que sobretodo fue seguir el boletín, hubo dos errores principalmente:

- Usé el método close del socket UDP dentro del bucle while, lo cual hacía que una vez se recibía el primer paquete, no se pudiera volver a abrir el socket,
la solución fué no  cerrarlo. Por ahora la lección es cerrar el socke solo en el cliente

- Tras hacer el debug comprobando NFDirectoryServer y Directoryconnector seguía sin encontrar el  error, aunque lo acoté a los métodos sendAndReciveDatagram
y testSendAndRecive, ya que haciendo uso de println comprobe que enviaba "loginok" pero no extraía  correctamente el String, logré arreglar la extracción del
String del Datagrama recibido, pero continuaba fallando, volvía a hacer uso de println para comprobar y para mi sorpresa se enviaba, y recibía "loginok", 
por lo que la solucción fué crear un String con la información recibida de sendAndRecive pero usando el constructor en lugar de hacer toString a response(byte[]),
seguía sin pasar el test, así usando el contructor de estring hice un objeto que usando la cadena "loginok" y la comprobaba usando el método equals.



-----15-2-2024 13:30 (StoneySpring688):
La unica complicación fue :
- rehacer el algoritmo de retransmision para la función sendAndReciveDatagrams de DirectoryConnector, antes trataba de reenviar por
todas las veces que el máximo numero de intentos le permitía, por lo que hice una función de tipo booleano (resend) en el mismo archivo, que simplemente vuelve
a enviar con un try catch, la función recive como parametros el paquete que se solicita al servidor, y en caso de un SocketTimeoutException devuelve false, si
todo sale bien devuelve true. así el for la usará  para retransmitir el paquete hasta que se envie con exito o hasta alcanzar el máximo de intentos.



-----15-2-2024 19:10 (StoneySpring688):
Se adaptó el método buildResponseFromRequest para que sea de tipo String en lugar de DirMessage, ya que DirMessage aun no se ha terminado de implementar, habrá que hacer :

- msgResponse volver a hacerlo DirMessage
- cambiar el tipo del método buildFromRequest a DirMessage
- dentro de buildResponseFromRequest cambiar response al tipo DirMessage
- los valores con los que se ha igualador response, arreglarlos con DirMessage.fromString() para que una vez cambiado el tipo de response, no hayan errores

Esas son las cosas que hay que arrgelar.



-----17-2-2024 10:30 (StoneySpring):
Se solucionaron los siguientes problemas :
- ahora el valor succes de logIntoDirectory se actualiza correctamente
- ahora cuando el usuario ya ha hecho login en el servidor delvuelve "login_failed:-1" en lugar de devolver un string "loginok&sessionKey"



-----27-2-2024 22:24 (StoneySpring688):
Se arregló un bug por el cual el método fromString de DirMessage no funcionaba correctamente 

-causa : se procesaba el caracter que marcaba el fin del mensaje, lo cual era  incorrecto y producia una excepción que finalizaba la ejecución
-solución : se cambió el caracter fin de linea por una cadena END_MESSAGE y  se añadió una  condición que evita que esta cadena se procese

cambios pendientes :

-restaurar el timeout una vez se termine el proceso de debug
-implementar nuevas clases de mensajes



-----28-2-2024 21:46 (StoneySpring688):
Se implementó la operación de logout con el mensaje correspondiente de tipo logout

Complicaciónes en la implementación :
- error del tipo I/O ya que se cerraba el socket de la clase directory connector al hacer una sola operación con el método sendAndReciveDatagrams
- hubo que hacer un nuevo código de error, no planeado, para la operación logout

Queda pendiente de implementar una operación para solicitar la lista de usuarios registrados, y sus correspondientes mensajes



-----29-2-2024 00:08 (StoneySpring):
Se corrigió un error por el cual logout no funcionaba correctamente :
- se actualizó el switch del método updateCurrentState de la clase NFController
- se cambió el  orden de eliminación de la estructura de nicks y sessionKeys para evitar almacenar el nombre de usuario a elminar de la estructura



-----29-2-2024 18:59 (StoneySpring688):
Se implementó la operación de consulta de los usuarios registrados
complicaciones :
- la estructura de datos que contenía los nicks de los usuarios en el mensaje no se inicializaba con el método de fromString, esto se solucionó con un bloque try catch
- no se guardaban los usuarios en la estructura desde el método fromString de la clase DirMessage



-----10-3-2024 01:29 (StoneySpring688):
Se implementaron los constructores para los mensajes de la clase PeerMessage, junto con sus métodos get y set


-----10-3-2024 21:35 (StoneySpring688):
Se implementó la clase PeerMessage
complicaciones :
- a la hora de la lectura no se estaba accediendo correctamente al campo opCode (fixed)


-----14-3-2024 03:17 (StoneySpring688):
Se implementaron los automatas
cambios requeridos :
- se añadió el campo nick al mensaje download (tcp)
- se requiere implementar nuevos mensajes y campos tcp y udp


-----14-3-2024 19:21 (StoneySpring688):
se implementó parte de la funcionalidad tcp del servidor de ficheros :
- se implementó la funcionalidad para responder a un mensaje de tipo download
- el mensaje de error MO está implementado usando arraydatainput/output, para poder escribir en ellos la secuencia de bytes de los diferentes hash validos, separados por una secuencia FINARRAY
- revisar como se hace el hash al fragmento del archivo, ya se ha dejado como el hash del fichero completo
