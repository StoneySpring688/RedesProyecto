-----10-02-2024 03:15 (StoneySpring688):
No hubo demasidos problemas en la implementación, ya que sobretodo fue seguir el boletín, hubo dos errores principalmente:

- Usé el método close del socket UDP dentro del bucle while, lo cual hacía que una vez se recibía el primer paquete, no se pudiera volver a abrir el socket,
  la solución fué no  cerrarlo. Por ahora la lección es cerrar el socke solo en el cliente

- Tras hacer el debug comprobando NFDirectoryServer y Directoryconnector seguía sin encontrar el  error, aunque lo acoté a los métodos sendAndReciveDatagram
  y testSendAndRecive, ya que haciendo uso de println comprobe que enviaba "loginok" pero no extraía  correctamente el String, logré arreglar la extracción del
  String del Datagrama recibido, pero continuaba fallando, volvía a hacer uso de println para comprobar y para mi sorpresa se enviaba, y recibía "loginok", 
  por lo que la solucción fué crear un String con la información recibida de sendAndRecive pero usando el constructor en lugar de hacer toString a response(byte[]),
  seguía sin pasar el test, así usando el contructor de estring hice un objeto que usando la cadena "loginok" y la comprobaba usando el método equals.



-----15-02-2024 13:30 (StoneySpring688):
La unica complicación fue :
- rehacer el algoritmo de retransmision para la función sendAndReciveDatagrams de DirectoryConnector, antes trataba de reenviar por
  todas las veces que el máximo numero de intentos le permitía, por lo que hice una función de tipo booleano (resend) en el mismo archivo, que simplemente vuelve
  a enviar con un try catch, la función recive como parametros el paquete que se solicita al servidor, y en caso de un SocketTimeoutException devuelve false, si
  todo sale bien devuelve true. así el for la usará  para retransmitir el paquete hasta que se envie con exito o hasta alcanzar el máximo de intentos.



-----15-02-2024 19:10 (StoneySpring688):
Se adaptó el método buildResponseFromRequest para que sea de tipo String en lugar de DirMessage, ya que DirMessage aun no se ha terminado de implementar, habrá que hacer :

- msgResponse volver a hacerlo DirMessage
- cambiar el tipo del método buildFromRequest a DirMessage
- dentro de buildResponseFromRequest cambiar response al tipo DirMessage
- los valores con los que se ha igualador response, arreglarlos con DirMessage.fromString() para que una vez cambiado el tipo de response, no hayan errores

Esas son las cosas que hay que arrgelar.



-----17-02-2024 10:30 (StoneySpring):
Se solucionaron los siguientes problemas :
- ahora el valor succes de logIntoDirectory se actualiza correctamente
- ahora cuando el usuario ya ha hecho login en el servidor delvuelve "login_failed:-1" en lugar de devolver un string "loginok&sessionKey"



-----27-02-2024 22:24 (StoneySpring688):
Se arregló un bug por el cual el método fromString de DirMessage no funcionaba correctamente 

-causa : se procesaba el caracter que marcaba el fin del mensaje, lo cual era  incorrecto y producia una excepción que finalizaba la ejecución
-solución : se cambió el caracter fin de linea por una cadena END_MESSAGE y  se añadió una  condición que evita que esta cadena se procese

cambios pendientes :

-restaurar el timeout una vez se termine el proceso de debug
-implementar nuevas clases de mensajes



-----28-02-2024 21:46 (StoneySpring688):
Se implementó la operación de logout con el mensaje correspondiente de tipo logout

Complicaciónes en la implementación :
- error del tipo I/O ya que se cerraba el socket de la clase directory connector al hacer una sola operación con el método sendAndReciveDatagrams
- hubo que hacer un nuevo código de error, no planeado, para la operación logout

Queda pendiente de implementar una operación para solicitar la lista de usuarios registrados, y sus correspondientes mensajes



-----29-02-2024 00:08 (StoneySpring):
Se corrigió un error por el cual logout no funcionaba correctamente :
- se actualizó el switch del método updateCurrentState de la clase NFController
- se cambió el  orden de eliminación de la estructura de nicks y sessionKeys para evitar almacenar el nombre de usuario a elminar de la estructura



-----29-02-2024 18:59 (StoneySpring688):
Se implementó la operación de consulta de los usuarios registrados
complicaciones :
- la estructura de datos que contenía los nicks de los usuarios en el mensaje no se inicializaba con el método de fromString, esto se solucionó con un bloque try catch
- no se guardaban los usuarios en la estructura desde el método fromString de la clase DirMessage



-----10-03-2024 01:29 (StoneySpring688):
Se implementaron los constructores para los mensajes de la clase PeerMessage, junto con sus métodos get y set



-----10-03-2024 21:35 (StoneySpring688):
Se implementó la clase PeerMessage
complicaciones :
- a la hora de la lectura no se estaba accediendo correctamente al campo opCode (fixed)



-----14-03-2024 03:17 (StoneySpring688):
Se implementaron los automatas
cambios requeridos :
- se añadió el campo nick al mensaje download (tcp)
- se requiere implementar nuevos mensajes y campos tcp y udp



-----14-03-2024 19:21 (StoneySpring688):
Se implementó parte de la funcionalidad tcp del servidor de ficheros :
- se implementó la funcionalidad para responder a un mensaje de tipo download
- el mensaje de error MO está implementado usando arraydatainput/output, para poder escribir en ellos la secuencia de bytes de los diferentes hash validos, separados por una secuencia FINARRAY
- revisar como se hace el hash al fragmento del archivo, ya se ha dejado como el hash del fichero completo



-----17-03-2024 17:39 (StoneySpring688):
Cambios :
- se separó de la funcionalidad de los automatas a una distribución más conveniente
- se plantearon los mensajes faltantes en sus correspondienntes ficheros



-----19-03-2024 00:51 (StoneySpring688):
Se ha solucionado un error en el controlador, concretamente en el caso downloadfrom del switch de processCommand, por el cual se trataba de acceder a un 
atributo que se inicializaba en otro método de la clase, pero que se correspondía a la operación de login en lugar de la  operación de descarga, la solución 
fue restaurar el cambio  hecho anteriormente con un backup de las primeras fases del proyecto donde aun no se había hecho ese cambio (solo se cambiaron las 
lineas afectadas por el error)

implementado :
- se establece la conexión entre peer que descarga y peer servidor(no se envía ningun mensaje, el método no avanza por el switch)

pendiente :
- implementar el envio del mensaje de descarga (método downloadFile)



-----03-04-2024 14:30 (StoneySpring688):
Se implementó la funcionalidad para enviar un mensaje de prueba en tcp para comprobar su correcto funcionamiento, esta prueba consiste en un mensaje (test)
el cual contiene un entero que se envia al servidor de ficheros, y este lo devuelve para que se puede comprobar que el que se envia y el que se recive son
el mismo.

pendiente :
- implementar la descarga de ficheros en el método downloadFile, haciendo uso de los mensajes y métodos ya creados



-----08-04-2024 23:00 (StoneySpring688):
Se terminó de implementar la funcionalidad básica necesaria para efectuar la descarga de un fichero
La "descarga" de la cual hablamos se trata del método "downloadFile" de  la clase NFConnector, básicamente envia un mensaje a un servidor de ficheros identificado por una dirección y un puerto,
el servidor tratará el mensaje consultando el hash, y en caso de obtener una sola coincidencia enviara el contenido al peer via mensaje de respuesta ( el array de bytes "data" definido en NFServerComm),
en caso de que no se encuentre una sola coincidencia se procederá con el mensaje de error correspondiente.

pendiente :
- implementar el correcto tratamiento para el mensaje de error "MultipleOptions", en este mensaje se devuelve un array de bytes de la forma :
  hash1 + FIN_ARRAY + hash2 + FIN_ARRAY ...
  de esta forma se  pueden almacenar distintos hash en un mismo array de bytes y diferenciarlo, ya que las probabilidades de que un hash  coincida justo con la codificación de la cadena FINARRAY deberían ser
  cercanas a cero.
  La funcionalidad pendiente de implementar consiste en dado ese array, separar un hash del resto de la cadena, imprimirlo y así sucesivamente mientras quede algún hash sin imprimir por pantalla.

 

-----24-04-2024 17:08 (StoneySpring):
cambios :
- se añadieron algunas restricciones, hacer login antes de realizar algunas operaciones
- se implemento la descarga de ficheros por nick para un servidor en primer plano
- se mejoró el comando userlist, para listar que pares son servidores y cuales no
- se mejoró el comando fgserve para elegir un  puerto libre, al azar, si el puerto por defecto está en uso

complicaciones :
- para la descraga por nick al usar fgserve fue necesario hacer un hilo que s encargue de dar de alta el servidor de ficheros, ya que el hilo principal se queda "parado" con el servidor en primer plano
- para la mejora del comando userlist fue necesario combinar tanto un array de nicks como un array de estados
- las restricciones presentaron pocas complicaciones, su principal uso es evitar que el programa termine por una excepción que se pueda tratar, aun falta encontrar más de estas
  excepciones y tratarlas, el tratamiento se ha  realizado  mediante un nuevo método protected en ControllerlogicDir y usando el estado de login actual en NFController

pendiente :
- implementar el comando stopserver para poder terminar la ejecucion del servidor de ficheros, este también deberá dar de baja el servidor de ficheros de el servidor de directorios
- implementar el comando publish para que cualquier peer pueda consultar los ficheros que comparte otro peer



-----26-04-2024 15:51 (StoneySpring):
cambios :
- se solucionó un error por el cual si el servidor estaba en el mismo dispositivo que un cliente, la dirección que se almacenaba en el servidor era la de
  localhost

pendiente :
- implementar el comando publish
- implementar el comando download para descargar un fichero de todos los peers que lo compartan



-----30-04-2024 00:57 (StoneySpring):
cambios :
- se solucionó un error con la recepción de  los mensajes de NFDirectoryServer
- se solucionó una serie de bugs en el comando publish
- se implementó la funcionalidad de filelist

complicaciones :
- tras imprimir todo lo que sucesia entre cliente y servidor ,(mensajes,  iteraciones de bucles, guardar información en estructuras de datos,...), se observaba que en NFDirectoryServer se "concatenaban"
  fragmentos de mensajes anteriores en el mensaje  actual, lo que provocaba comportamientos inesperados, tras busacar la causa del problema se determinó que era el DatagramPackage "pakFromClient"
  y sus dependencias,los cuales se inicializaban fuera de el bucle del servidor, ocasionado que no se reiniciaran de mensaje en mensaje, por lo que cuando un menssaje ocupaba más bytes que el posterior,
  esos bytes  se "adherían" al siguiente mensaje, ocasionando que no se lo puediera tratar correctamente con el método "fromString" de la clase "DirMessage"
- el mensaje  publish no fué debidamente tratado con  el método "fromString" de la clase "DirMessage", lo que ocasionaba que se sobrescribiera la información a cada campo que se leía,
  la solución fué incorporar un bloque try catch, que en caso de que saltara una excepcion "NullPointerException" inicializara la estructura de datos anntes de añadir información, logrando así inicializar la
  estructura solo la primera vez, y no cada vex que se accedía a sus casos en el switch.

pendiente : 
- implementar la funcionalidad de search
- implementar la funcionalidad  de stopserver, recordando dar de baja al peer de los ficheros que deje de compartir, y en caso de que no los comparta nadie más, dar de baja los ficheros y su metainformación,
  así como dar de baja al peer de la lista de peers
- implementar el método download para descargar un fichero a la vez, de todos  los peers que lo compartan



-----30-04-2024 14:40 (StoneySpring):
cambios :
- se implementó la funcionalidad de search

complicaciones :
- para consultar los ficheros identificados por una subcadena del hash, se hizo un atributo hash map que actua de DataBase, no fue necesario hacer una instancia de "FileDataBase"

pendiente :
- implementar la funcionalidad  de stopserver, recordando dar de baja al peer de los ficheros que deje de compartir, y en caso de que no los comparta nadie más, dar de baja los ficheros y su metainformación,
  así como dar de baja al peer de la lista de peers
- implementar el método download para descargar un fichero a la vez, de todos  los peers que lo compartan
- en caso de tener tiempo: 
  - cambiar los mensajes para que no hayan mensajes de confirmación con subtipos, si no que cada confirmación sea un mensaje.
  - cambiar la forma en que se tratan publish y fileinfo para que no sean necesarias tantas estructuras de datos en el servidor de directorios



-----30-04-2024 18:57 (StoneySpring):
cambios :
- se implementó la funcionalidad de stopServer
- se implementó la funcionalidad necesaria para mantener actualizada la información del servidor de directorios

complicaciones :
- cuando se usaba stopServer, al estar el método esperando en accept() aceptaba una última operación, la solución fué  establecer un timeout de 1 segundo, ya que así al segundo de usar el comando se parará el
  servidor, pero esto no hace que se vaya pasando ya que al saltar el timeout vuelve a iniciar el bucle y estar a la espera de peticiones

pendiente :
- implementar el método download para descargar un fichero a la vez, de todos  los peers que lo compartan
- en caso de tener tiempo: 
  - cambiar los mensajes para que no hayan mensajes de confirmación con subtipos, si no que cada confirmación sea un mensaje.
  - cambiar la forma en que se tratan publish y fileinfo para que no sean necesarias tantas estructuras de datos en el servidor de directorios



-----30-04-2024 22:33 (StoneySpring):
cambios :
- se mejoró el comando file list, para que cada fichero muestre una lista de los peers que lo comparten

complicaciones :
- no se implementó correctamente el nuevo mensaje en el método "fromString" de la clase "dirMessage" lo que provocaba que no se guardaran los nicks y saltara un NullPointerException
- fue necesario añadir un nuevo método, "PrintToSysOutPlus", a la clase "FileInfo", para poder imprimir la nueva columna correctamente

pendiente :
- implementar el método download para descargar un fichero a la vez, de todos  los peers que lo compartan
- en caso de tener tiempo: 
  - cambiar los mensajes para que no hayan mensajes de confirmación con subtipos, si no que cada confirmación sea un mensaje.
  - cambiar la forma en que se tratan publish y fileinfo para que no sean necesarias tantas estructuras de datos en el servidor de directorios



-----01-05-2024 17:57 (StoneySpring):
cambios :
- se implementó el comando download de form concurrente

complicaciones :
- este método requería comunicarse con el servidor de directorios y el o los peers que comparten un fichero, por lo que requería de mucho más diseño previo, por lo que hubo que pensar largo y tendido
  como se iba a implementar, antes de comenzar a hacerlo, ya que al contrario que la descarga por nick, aquí se manejaba mucha más información, e implicaba el uso de hilos.
- la siguiente complicación fué el paso de toda la información entre conector del directorio y controladores, por lo que la estructura que almacena y pasa la infromación, es el propio mensaje recivido del servidor
  de directorios.
- la siguiente complicación, fué coordinar los hilos, ya que había que plantearlo muy bien de antemano, y sufrió numerosos cambios, pasando de una variable compartida, a un método synchronize, y de ahí al uso
  de un ReenTrantLock junto con condition y una variable compartida.

pendiente :
- en caso de tener tiempo: 
  - cambiar los mensajes para que no hayan mensajes de confirmación con subtipos, si no que cada confirmación sea un mensaje.
  - cambiar la forma en que se tratan publish y fileinfo para que no sean necesarias tantas estructuras de datos en el servidor de directorios
